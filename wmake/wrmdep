#!/bin/sh
#------------------------------------------------------------------------------
# =========                 |
# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
#  \\    /   O peration     |
#   \\  /    A nd           | Copyright (C) 2015-2016 OpenFOAM Foundation
#    \\/     M anipulation  |
#-------------------------------------------------------------------------------
# License
#     This file is part of OpenFOAM.
#
#     OpenFOAM is free software: you can redistribute it and/or modify it
#     under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#     for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
#
# Script wrmdep
#
# Usage
#     wrmdep [-a | -all | all] [file]
#     wrmdep [-o | -old] [dir1 .. dirN]
#     wrmdep -update
#
# Description
#     This is a catch-all script for pruning .dep files, depending on the
#     provided arguments.
#
#     [-a | -all | all] [file]:
#     Remove all .dep files from the object directory tree corresponding to the
#     current source derectory or remove only the .dep files referring to the
#     optionally specified [file].  With the -a/-all/all option the .dep files
#     are removed for all platforms rather than just the current platform.
#
#     [-o | -old] [dir1 .. dirN]:
#     Remove *.dep files that are without a corresponding .C or .L source file.
#     This occurs when a directory has been moved.
#         - prints the questionable directory and *.dep file
#
#     -update:
#     Search all the "src" and "application" directories of the project for
#     broken symbolic links for source code files and then remove all .dep
#     files that relate to files that no longer exist.
#     Must be executed in the project top-level directory: $WM_PROJECT_DIR.
#
#------------------------------------------------------------------------------
Script=${0##*/}

# Source the wmake functions
. ${0%/*}/scripts/wmakeFunctions

usage() {
    exec 1>&2
    while [ "$#" -ge 1 ]; do echo "$1"; shift; done
    cat<<USAGE
Usage:

    $Script [-a | -all | all] [file]

        Remove all .dep files or remove .dep files referring to <file>
        With the -a/-all/all option the .dep files are removed for all
        platform rather than just the current platform.

    $Script [-o | -old] [dir1 .. dirN]

        Remove *.dep files that are without a corresponding .C or .L file.
        This occurs when a directory has been moved.
          - prints the questionable directory and *.dep file

        Note: to remove empty directories, run: wclean empty

    $Script -update

        Search all the "src" and "application" directories of the project for
        broken symbolic links for source code files and then remove all .dep
        files that relate to files that no longer exist.
        Must be executed in the project top-level directory: $WM_PROJECT_DIR

USAGE
    exit 1
}


#------------------------------------------------------------------------------
# Parse arguments and options
#------------------------------------------------------------------------------

# Default is for removing all .dep files in the current directory
rmdepMode="files"

# Default to processing only the current platform
all=

while [ "$#" -gt 0 ]
do
    case "$1" in
    # Print help
    -h | -help)
        usage
        ;;
    # Non-stop compilation, ignoring errors
    -a | -all | all)
        all="all"
        shift
        ;;
    -o | -old)
        rmdepMode="oldFolders"
        shift
        ;;
    -update)
        rmdepMode="updateMode"
        shift
        ;;
    -*)
       usage "unknown option: '$*'"
       ;;
    *)
       break
       ;;
    esac
done

# Check environment variables
checkEnv


case "$rmdepMode" in
files)

    #-------------------------------------------------------------------------
    # Remove the selected .dep files from the object tree
    #-------------------------------------------------------------------------

    findObjectDir .

    # With the -a/-all option replace the current platform with a wildcard
    if [ "$all" = "all" ]
    then
        objectsDir=$(echo $objectsDir | sed s%$WM_OPTIONS%*% )
    fi

    if [ "$#" -eq 0 ]
    then
        echo "removing all .dep files ..."
        find $objectsDir -name '*.dep' -print | xargs -t rm 2>/dev/null
    else
        echo "removing .dep files referring to $1 ..."
        find $objectsDir -name '*.dep' -exec grep "$1" '{}' \; \
             -exec rm '{}' \;
    fi

    ;;

oldFolders)

    # Default is the current directory
    [ "$#" -gt 0 ] || set -- .

    for checkDir
    do
        findObjectDir $checkDir

        if [ -d $objectsDir ]
        then
            echo "Searching: $objectsDir"
        else
            echo "Skipping non-dir: $objectsDir"
            continue
        fi

        find $objectsDir -name '*.dep' -print | while read depFile
        do
            depToSource $depFile

            # Check C++ or Flex source file exists
            if [ ! -r "$sourceFile" ];
            then
                echo "rm $depFile"
                rm -f $depFile 2>/dev/null
            fi
        done
    done

    ;;

updateMode)

    [ "$PWD" = "$WM_PROJECT_DIR" ] \
        || usage "Not in the project top-level directory"

    echo "Purging all dep files that relate to files that no longer exist..."
    fileNameList=$(find -L src applications -name '*.[CHL]' -type l)

    for filePathAndName in $fileNameList
    do
        fileName=$(basename $filePathAndName)
        echo "Purging from 'src': $fileName"
        cd src
        $Script -a $fileName

        echo "Purging from 'applications': $fileName"
        cd ../applications
        $Script -a $fileName

        cd ..

        # Just in case, remove the symbolic link as the last step
        unlink $filePathAndName
    done

    ;;

esac


#------------------------------------------------------------------------------
# Cleanup local variables and functions
#------------------------------------------------------------------------------

unset Script usage rmdepMode all


#------------------------------------------------------------------------------
