/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  dev                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 0.0025;

vertices
(
   (-28 -10 -10)
   (-28 -10  -5)
   (-28 -10   5)
   (-28 -10  10)
   (-28  -5 -10)
   (-28  -5  -5)
   (-28  -5   5)
   (-28  -5  10)
   (-28   5 -10)
   (-28   5  -5)
   (-28   5   5)
   (-28   5  10)
   (-28  10 -10)
   (-28  10  -5)
   (-28  10   5)
   (-28  10  10)

   (-14 -10 -10)
   (-14 -10  -5)
   (-14 -10   5)
   (-14 -10  10)
   (-14  -5 -10)
   (-14  -5  -5)
   (-14  -5   5)
   (-14  -5  10)
   (-14   5 -10)
   (-14   5  -5)
   (-14   5   5)
   (-14   5  10)
   (-14  10 -10)
   (-14  10  -5)
   (-14  10   5)
   (-14  10  10)

   ( -8 -10 -10)
   ( -8 -10  -5)
   ( -8 -10   5)
   ( -8 -10  10)
   ( -8  -5 -10)
   ( -8  -5  -5)
   ( -8  -5   5)
   ( -8  -5  10)
   ( -8   5 -10)
   ( -8   5  -5)
   ( -8   5   5)
   ( -8   5  10)
   ( -8  10 -10)
   ( -8  10  -5)
   ( -8  10   5)
   ( -8  10  10)

   (  0 -10 -10)
   (  0 -10  -5)
   (  0 -10   5)
   (  0 -10  10)
   (  0  -5 -10)
   (  0  -5  -5)
   (  0  -5   5)
   (  0  -5  10)
   (  0   5 -10)
   (  0   5  -5)
   (  0   5   5)
   (  0   5  10)
   (  0  10 -10)
   (  0  10  -5)
   (  0  10   5)
   (  0  10  10)

   (  6 -10 -10)
   (  6 -10  -5)
   (  6 -10   5)
   (  6 -10  10)
   (  6  -5 -10)
   (  6  -5  -5)
   (  6  -5   5)
   (  6  -5  10)
   (  6   5 -10)
   (  6   5  -5)
   (  6   5   5)
   (  6   5  10)
   (  6  10 -10)
   (  6  10  -5)
   (  6  10   5)
   (  6  10  10)

   ( 10 -10 -10)
   ( 10 -10  -5)
   ( 10 -10   5)
   ( 10 -10  10)
   ( 10  -5 -10)
   ( 10  -5  -5)
   ( 10  -5   5)
   ( 10  -5  10)
   ( 10   5 -10)
   ( 10   5  -5)
   ( 10   5   5)
   ( 10   5  10)
   ( 10  10 -10)
   ( 10  10  -5)
   ( 10  10   5)
   ( 10  10  10)

   (-11  -2  -2)
   (-11  -2   2)
   (-11   2  -2)
   (-11   2   2)

   ( -8  -2  -2)
   ( -8  -2   2)
   ( -8   2  -2)
   ( -8   2   2)

   (  0  -2  -2)
   (  0  -2   2)
   (  0   2  -2)
   (  0   2   2)

   (  3  -2  -2)
   (  3  -2   2)
   (  3   2  -2)
   (  3   2   2)
);

x1  14; x2   6; x3  20; x4   6; x5   4; // X divisions
yc   6; ys  12; zc $yc; zs $ys;         // Y and Z corner and side divisions
o    6;                                 // O-grid divisions

blocks
(
    #include "blockMeshDict.caseBlocks"

    hex ( 48  52  53  49  64  68  69  65) ($yc $zc $x4) simpleGrading (1 1 1)
    hex ( 49  53  54  50  65  69  70  66) ($yc $zs $x4) simpleGrading (1 1 1)
    hex ( 50  54  55  51  66  70  71  67) ($yc $zc $x4) simpleGrading (1 1 1)
    hex ( 52  56  57  53  68  72  73  69) ($ys $zc $x4) simpleGrading (1 1 1)
    hex ( 54  58  59  55  70  74  75  71) ($ys $zc $x4) simpleGrading (1 1 1)
    hex ( 56  60  61  57  72  76  77  73) ($yc $zc $x4) simpleGrading (1 1 1)
    hex ( 57  61  62  58  73  77  78  74) ($yc $zs $x4) simpleGrading (1 1 1)
    hex ( 58  62  63  59  74  78  79  75) ($yc $zc $x4) simpleGrading (1 1 1)

    hex ( 64  68  69  65  80  84  85  81) ($yc $zc $x5) simpleGrading (1 1 1)
    hex ( 65  69  70  66  81  85  86  82) ($yc $zs $x5) simpleGrading (1 1 1)
    hex ( 66  70  71  67  82  86  87  83) ($yc $zc $x5) simpleGrading (1 1 1)
    hex ( 68  72  73  69  84  88  89  85) ($ys $zc $x5) simpleGrading (1 1 1)
    hex ( 69  73  74  70  85  89  90  86) ($ys $zs $x5) simpleGrading (1 1 1)
    hex ( 70  74  75  71  86  90  91  87) ($ys $zc $x5) simpleGrading (1 1 1)
    hex ( 72  76  77  73  88  92  93  89) ($yc $zc $x5) simpleGrading (1 1 1)
    hex ( 73  77  78  74  89  93  94  90) ($yc $zs $x5) simpleGrading (1 1 1)
    hex ( 74  78  79  75  90  94  95  91) ($yc $zc $x5) simpleGrading (1 1 1)

    hex (100 102 103 101 104 106 107 105) ($ys $zs $x3) simpleGrading (1 1 1)
    hex (104 106 107 105 108 110 111 109) ($ys $zs $x4) simpleGrading (1 1 1)
    hex (108 110 111 109 69  73  74  70 ) ($ys $zs $o ) simpleGrading (1 1 1)

    hex ( 53  54  70  69 104 105 109 108) ($zs $x4 $o ) simpleGrading (1 1 1)
    hex ( 57  53  69  73 106 104 108 110) ($ys $x4 $o ) simpleGrading (1 1 1)
    hex ( 54  58  74  70 105 107 111 109) ($ys $x4 $o ) simpleGrading (1 1 1)
    hex ( 58  57  73  74 107 106 110 111) ($zs $x4 $o ) simpleGrading (1 1 1)
);

edges
(
);

defaultPatch
{
    name walls;
    type wall;
}

boundary
(
    #include "blockMeshDict.caseBoundary"

    outlet
    {
        type patch;
        faces
        (
            (80 84 85 81)
            (81 85 86 82)
            (82 86 87 83)
            (84 88 89 85)
            (85 89 90 86)
            (86 90 91 87)
            (88 92 93 89)
            (89 93 94 90)
            (90 94 95 91)
        );
    }

    sides
    {
        type symmetry;
        faces
        (
            (48 49 65 64)
            (49 50 66 65)
            (50 51 67 66)
            (48 52 68 64)
            (52 56 72 68)
            (56 60 76 72)
            (51 55 71 67)
            (55 59 75 71)
            (59 63 79 75)
            (60 61 77 76)
            (61 62 78 77)
            (62 63 79 78)

            (64 65 81 80)
            (65 66 82 81)
            (66 67 83 82)
            (64 68 84 80)
            (68 72 88 84)
            (72 76 92 88)
            (67 71 87 83)
            (71 75 91 87)
            (75 79 95 91)
            (76 77 93 92)
            (77 78 94 93)
            (78 79 95 94)
        );
    }
);

mergePatchPairs
(
);

// ************************************************************************* //
