/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  dev
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "";
    object      caseProperties;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
#inputSyntax slash;

calculated
{
    alphat
    {
        type            calculated;
        value           uniform 0;
    }
    nut
    {
        type            calculated;
        value           uniform 0;
    }
}

inlet
{
    p
    {
        type            zeroGradient;
    }
}

outlet
{
    p
    {
        type            totalPressure;
        p0              uniform 1e5;
    }

    U
    {
        type            pressureInletOutletVelocity;
        value           uniform (0 0 0);
    }

    T
    {
        type            inletOutlet;
        inletValue      uniform $!outerInlet/T;
        value           $inletValue;
    }

    k
    {
        type            inletOutlet;
        inletValue      uniform $!innerInlet/k;
        value           $inletValue;
    }

    epsilon
    {
        type            inletOutlet;
        inletValue      uniform $!innerInlet/epsilon;
        value           $inletValue;
    }
}

wall
{
    p
    {
        type            zeroGradient;
    }

    U
    {
        type            fixedValue;
        value           uniform (0 0 0);
    }

    T
    {
        type            zeroGradient;
    }

    k
    {
        type            kqRWallFunction;
        value           uniform $!innerInlet/k;
    }

    epsilon
    {
        type            epsilonWallFunction;
        value           uniform $!innerInlet/epsilon;
    }

    nut
    {
        type            nutkWallFunction;
        value           uniform 0;
    }

    alphat
    {
        type            compressible::alphatWallFunction;
        Prt             0.85;
        value           uniform 0;
    }
}

movingWall
{
    U
    {
        type            movingWallVelocity;
        value           uniform (0 0 0);
    }
}

// ************************************************************************* //
